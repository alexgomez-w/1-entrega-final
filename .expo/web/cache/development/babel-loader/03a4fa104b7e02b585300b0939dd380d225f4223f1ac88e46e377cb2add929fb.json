{"ast":null,"code":"import * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('sessions.db');\nexport var init = function init() {\n  var promise = new Promise(function (res, rej) {\n    db.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS sessions (localId TEXT PRIMARY KEY NOT NULL, email TEXT NOT NULL, idToken TEXT NOT NULL)', [], function (_, result) {\n        return res(result);\n      }, function (_, error) {\n        return rej(error);\n      });\n    });\n  });\n  return promise;\n};\nexport var dropTableSessions = function dropTableSessions() {\n  var promise = new Promise(function (res, rej) {\n    db.transaction(function (tx) {\n      tx.executeSql('DROP TABLE IF EXISTS sessions ', [], function (_, result) {\n        return res(result);\n      }, function (_, error) {\n        return rej(error);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertSession = function insertSession(_ref) {\n  var email = _ref.email,\n    localId = _ref.localId,\n    idToken = _ref.idToken;\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO sessions (email, localId, idToken) VALUES (?, ?, ?);', [email, localId, idToken], function (_, result) {\n        return resolve(result);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n  return promise;\n};\nexport var getSession = function getSession() {\n  var promise = new Promise(function (acc, rej) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM sessions', [], function (_, result) {\n        return acc(result);\n      }, function (_, error) {\n        return rej(error);\n      });\n    });\n  });\n  return promise;\n};\nexport var deleteSession = function deleteSession(localId) {\n  var promise = new Promise(function (acc, rej) {\n    db.transaction(function (tx) {\n      tx.executeSql('DELETE FROM sessions WHERE localId = ?', [localId], function (_, result) {\n        return acc(result);\n      }, function (_, error) {\n        return rej(error);\n      });\n    });\n  });\n  return promise;\n};","map":{"version":3,"names":["SQLite","db","openDatabase","init","promise","Promise","res","rej","transaction","tx","executeSql","_","result","error","dropTableSessions","insertSession","_ref","email","localId","idToken","resolve","reject","getSession","acc","deleteSession"],"sources":["C:/Users/alexander.gomez/projects/clonados/CODERHOUSE/1-entrega-final/src/SQLite/index.js"],"sourcesContent":["import * as SQLite from 'expo-sqlite'\n\n//Generar un archivo (Win: Documents)\nconst db = SQLite.openDatabase('sessions.db')\n\n//Inicializar la tabla\nexport const init = () => {\n    const promise = new Promise((res, rej) => {\n        db.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS sessions (localId TEXT PRIMARY KEY NOT NULL, email TEXT NOT NULL, idToken TEXT NOT NULL)',\n                [],\n                (_, result) => res(result),\n                (_, error) => rej(error)\n            )\n        })\n    })\n    return promise\n}\n\n//Borrar la tabla sessions\nexport const dropTableSessions = () => {\n    const promise = new Promise((res, rej) => {\n        db.transaction(tx => {\n            tx.executeSql(\n                'DROP TABLE IF EXISTS sessions ',\n                [],\n                (_, result) => res(result),\n                (_, error) => rej(error)\n            )\n        })\n    })\n    return promise\n}\n\nexport const insertSession = ({\n    email,\n    localId,\n    idToken\n}) => {\n    const promise = new Promise((resolve, reject) => {\n        db.transaction(tx => {\n            tx.executeSql(\n                'INSERT INTO sessions (email, localId, idToken) VALUES (?, ?, ?);',\n                [email, localId, idToken],\n                (_, result) => resolve(result),\n                (_, error) => reject(error)\n            )\n        })\n    })\n    return promise\n}\n\nexport const getSession = () => {\n    const promise = new Promise((acc, rej) => {\n        db.transaction(tx => {\n            tx.executeSql(\n                'SELECT * FROM sessions',\n                [],\n                (_, result) => acc(result),\n                (_, error) => rej(error)\n            )\n        })\n    })\n    return promise\n}\n\nexport const deleteSession = (localId) => {\n    const promise = new Promise((acc, rej) => {\n        db.transaction(tx => {\n            tx.executeSql(\n                'DELETE FROM sessions WHERE localId = ?',\n                [localId],\n                (_, result) => acc(result),\n                (_, error) => rej(error)\n            )\n        })\n    })\n    return promise\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}